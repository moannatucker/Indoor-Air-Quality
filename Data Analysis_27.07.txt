{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '0', '0', '0', '426257', '289006', '0', '0', '0']\n"
     ]
    }
   ],
   "source": [
    "#Code to open a csv file and print one of values\n",
    "#So far the data is recognised as a string so need to convert to numbers\n",
    "import csv\n",
    "with open('example_test.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    #Creating list comprehensions to store data\n",
    "    lpos = [] #low pulse occupancy\n",
    "    ratios = [] #ratios\n",
    "    concentrations = [] #concentrations\n",
    "    for row in readCSV:\n",
    "        lpo = row[0]\n",
    "        ratio = row[1]\n",
    "        concentration = row[2]\n",
    "        lpos.append(lpo)\n",
    "        ratios.append(ratio)\n",
    "        concentrations.append(concentration)\n",
    "        \n",
    "    print(lpos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Modified list is: [0, 0, 0, 0, 426257, 289006, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "#Converting strings to integers, hopefully this will be \n",
    "for i in range(0, len(lpos)):\n",
    "    lpos[i] = int(lpos[i])\n",
    "    \n",
    "print(\"Modified list is: \" +str(lpos))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no dust detected\n",
      "no dust detected\n",
      "no dust detected\n",
      "no dust detected\n",
      "dust detected\n",
      "dust detected\n",
      "no dust detected\n",
      "no dust detected\n",
      "no dust detected\n"
     ]
    }
   ],
   "source": [
    "for lpo in lpos:\n",
    "    if lpo > 0:\n",
    "        print(\"dust detected\")\n",
    "    else:\n",
    "        print(\"no dust detected\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-9-fe951f886748>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     10\u001b[0m         \u001b[0mlpo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m         \u001b[0mratio\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m         \u001b[0mconcentration\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     13\u001b[0m         \u001b[0mmotion\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m         \u001b[0mlpos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlpo\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "with open('important_test.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    #Creating list comprehensions to store data\n",
    "    lpos = [] #low pulse occupancy\n",
    "    ratios = [] #ratios\n",
    "    concentrations = [] #concentrations\n",
    "    motions = [] #motion\n",
    "    for row in readCSV:\n",
    "        lpo = row[0]\n",
    "        ratio = row[1]\n",
    "        concentration = row[2]\n",
    "        motion = row[3]\n",
    "        lpos.append(lpo)\n",
    "        ratios.append(ratio)\n",
    "        concentrations.append(concentration)\n",
    "        motions.append(motion)\n",
    "    print(lpos)\n",
    "    print(motions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Workbook:', 'To play this data back: Open the original Excel workbook file then click the *Import Data File* button in the *Data Streamer* ribbon and navigate to this file.', 'For more information visit http://aka.ms/hackingstem/', '0', '0', '0', '0', '0', '0', '0', '127206', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '58198', '0', '0', '0', '0']\n",
      "['ï»¿#!', '#!', '#!', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Motion detected', 'Motion detected', 'Watching', 'Motion detected', 'Watching', 'Motion detected', 'Motion detected', 'Watching', 'Motion detected', 'Motion detected', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching']\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "with open('test_data_new_line_format.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    #Creating list comprehensions to store data\n",
    "    motions = [] #motion\n",
    "    lpos = [] #low pulse occupancy\n",
    "    ratios = [] #ratios\n",
    "    concentrations = [] #concentrations\n",
    "    \n",
    "    for row in readCSV:\n",
    "        motion = row[0]\n",
    "        lpo = row[1]\n",
    "        ratio = row[2]\n",
    "        concentration = row[3]\n",
    "        \n",
    "        motions.append(motion)\n",
    "        lpos.append(lpo)\n",
    "        ratios.append(ratio)\n",
    "        concentrations.append(concentration)\n",
    "        \n",
    "    print(lpos)\n",
    "    print(motions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'startswith'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-27-c17ed445c5d1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mcurline\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mreadCSV\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m         \u001b[1;32mif\u001b[0m \u001b[0mcurline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"#\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m             \u001b[1;32mbreak\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'list' object has no attribute 'startswith'"
     ]
    }
   ],
   "source": [
    "#Trying to get the file to skip the comment lines\n",
    "import csv\n",
    "count = 0\n",
    "\n",
    "with open('test_data_new_line_format.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    \n",
    "    for curline in readCSV:\n",
    "        if curline.startswith(\"#\"):\n",
    "            break\n",
    "        else:\n",
    "            #Creating list comprehensions to store data\n",
    "            motions = [] #motion\n",
    "            lpos = [] #low pulse occupancy\n",
    "            ratios = [] #ratios\n",
    "            concentrations = [] #concentrations\n",
    "    \n",
    "            for row in readCSV:\n",
    "                motion = row[0]\n",
    "                lpo = row[1]\n",
    "                ratio = row[2]\n",
    "                concentration = row[3]\n",
    "        \n",
    "                motions.append(motion)\n",
    "                lpos.append(lpo)\n",
    "                ratios.append(ratio)\n",
    "                concentrations.append(concentration)\n",
    "        \n",
    "                print(lpos)\n",
    "                print(motions)\n",
    "    \n",
    "\n",
    "\n",
    "       \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['0', '0', '0', '0', '0', '0', '0', '127206', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '58198', '0', '0', '0', '0']\n",
      "['Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Motion detected', 'Motion detected', 'Watching', 'Motion detected', 'Watching', 'Motion detected', 'Motion detected', 'Watching', 'Motion detected', 'Motion detected', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching', 'Watching']\n"
     ]
    }
   ],
   "source": [
    "#Got the file to skip the comment lines\n",
    "import csv\n",
    "count = 0\n",
    "\n",
    "with open('test_data_new_line_format.csv') as csvfile:\n",
    "    readCSV = csv.reader(csvfile, delimiter=',')\n",
    "    \n",
    "    for _ in range(2):\n",
    "        next(csvfile)\n",
    "    for line in csvfile:\n",
    "        #Creating list comprehensions to store data\n",
    "            motions = [] #motion\n",
    "            lpos = [] #low pulse occupancy\n",
    "            ratios = [] #ratios\n",
    "            concentrations = [] #concentrations\n",
    "    \n",
    "            for row in readCSV:\n",
    "                motion = row[0]\n",
    "                lpo = row[1]\n",
    "                ratio = row[2]\n",
    "                concentration = row[3]\n",
    "        \n",
    "                motions.append(motion)\n",
    "                lpos.append(lpo)\n",
    "                ratios.append(ratio)\n",
    "                concentrations.append(concentration)\n",
    "        \n",
    "    print(lpos)\n",
    "    print(motions)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
